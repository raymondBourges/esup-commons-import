<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<!--
		/properties/dao/dao.xml The configuration file for Data Access Object.
		This file should not be modified but by the developers. This file is
		referenced by /properties/applicationContext.xml.
	-->
	<!--
		PersistenceAnnotationBeanPostProcessor looks for @PersistenceContext
		to set entity manager in dao
	-->
	
	<!-- GESTION DES TRANSACTIONS -->
	
	<aop:config>
		<aop:pointcut id="domainMethods"
			expression="execution(* org.esupportail.*.domain.*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="domainMethods" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	
	<bean id="transactionManager" class="org.esupportail.commons.dao.HibernateTransactionManager">
		<description>
			This bean is the transaction manager.
		</description>
		<property name="useJndi" value="${hibernate.useJndi}" />
		<property name="jdbcSessionFactoryBeanName" value="${hibernate.jdbcSessionFactoryBeanName}" />
		<property name="jndiSessionFactoryBeanName" value="${hibernate.jndiSessionFactoryBeanName}" />
	</bean>
	


	
	
	<!-- SESSION FACTORY HIBERNATE -->
	
	<bean id="abstractHibernateSessionFactory" abstract="true"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<description>
			This bean is common to all the session factories (see below). It allows 
			a single declaration of the mapping files.
		</description>
		<property name="mappingLocations">
			<list>
				<!-- ***** NOTIFICATIONS  ***** -->
				<value>
					classpath:/properties/dao/hibernate/mapping/User.hbm.xml
				</value>
			</list>
		</property>
	</bean>
	<bean id="abstractJdbcHibernateSessionFactory" parent="abstractHibernateSessionFactory"
		abstract="true">
		<description>
			An abstract session factory based on JDBC.
		</description>
		<property name="configLocation"
			value="classpath:/properties/dao/hibernate/hibernate-jdbc.cfg.xml" />
	</bean>
	<bean id="abstractJndiHibernateSessionFactory" parent="abstractHibernateSessionFactory"
		abstract="true">
		<description>
			An abstract session factory based on JDBC.
		</description>
		<property name="configLocation"
			value="classpath:/properties/dao/hibernate/hibernate-jndi.cfg.xml" />
	</bean>
	<bean id="jdbcSessionFactory" parent="abstractJdbcHibernateSessionFactory"
		lazy-init="true">
		<description>
			The 'normal' session factory based on JDBC.
		</description>
	</bean>
	<bean id="jndiSessionFactory" parent="abstractJndiHibernateSessionFactory"
		lazy-init="true">
		<description>
			The 'normal' session factory based on JNDI.
		</description>
	</bean>
	<bean id="jdbcExceptionTranslator"
		class="org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator"
		lazy-init="true">
		<description>
			The bean that translates exceptions thrown by JDBC into Spring exceptions.
		</description>
	</bean>
	
	<bean id="jdbcHibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate"
		lazy-init="true">
		<description>
			The JDBC Hibernate template, 
			used by the DAO service to access the database from batch commands.
		</description>
		<property name="sessionFactory" ref="jdbcSessionFactory" />
		<property name="jdbcExceptionTranslator" ref="jdbcExceptionTranslator" />
		<property name="allowCreate" value="false" />
	</bean>
	
	<bean id="jndiHibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate"
		lazy-init="true">
		<description>
			The Hibernate template based on JNDI, 
			used by the DAO service to access the database from web requests.
		</description>
		<property name="sessionFactory" ref="jndiSessionFactory" />
		<property name="jdbcExceptionTranslator" ref="jdbcExceptionTranslator" />
		<property name="allowCreate" value="false" />
	</bean>
	<bean id="daoService"
		class="org.esupportail.example.dao.HibernateDaoServiceImpl"
		lazy-init="true">
		<description>
			This bean is the DAO service, the interface used by the
			domain service to access
			the database. It must implement interface
			org.esupportail.outilsWeb.dao.DaoService.
		</description>
		<property name="useJdbc" value="true" />
		<property name="useJndi" value="${hibernate.useJndi}" />
		<property name="jdbcHibernateTemplateBeanName" value="${hibernate.jdbcTemplateBeanName}" />
		<property name="jndiHibernateTemplateBeanName" value="${hibernate.jndiTemplateBeanName}" />
	</bean>
</beans>